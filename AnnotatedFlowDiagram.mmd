flowchart TD
    %% Use Case Flow (Main Path)
    Start([User Enters URL]) --> Step1[Step 1: Receive URL Input]
    Step1 --> Step2[Step 2: Validate Format]
    Step2 --> Step3[Step 3: Check Accessibility]
    Step3 --> Step4[Step 4: Security Screening]
    Step4 --> Success([URL Validated Successfully])
    
    %% Architecture Component Annotations for Each Step
    Step1 -.-> Arch1[🏗️ Architecture Components<br/>• Load Balancer: Nginx/AWS ALB<br/>• API Gateway: Kong/AWS Gateway<br/>• Auth Service: OAuth 2.0/JWT<br/>• Rate Limiter: Redis-based throttling]
    
    Step2 -.-> Arch2[🏗️ Architecture Components<br/>• Validation Service: Node.js/Spring Boot<br/>• Regex Engine: Built-in pattern matching<br/>• Cache Manager: Redis client wrapper<br/>• Pattern Matcher: RFC 3986 compliance]
    
    Step3 -.-> Arch3[🏗️ Architecture Components<br/>• HTTP Client: Axios/OkHttp pool<br/>• Connection Pool: 100 concurrent connections<br/>• Circuit Breaker: Hystrix/Resilience4j<br/>• DNS Resolver: System/Custom resolver]
    
    Step4 -.-> Arch4[🏗️ Architecture Components<br/>• Security Service: Microservice architecture<br/>• Blacklist Database: PostgreSQL with indexes<br/>• External Scanner: VirusTotal/URLVoid API<br/>• Threat Intelligence: Real-time updates]
    
    %% Non-Functional Requirements Annotations
    Step1 -.-> NFR1[⚡ Non-Functional Requirements<br/>• Performance: Response time <200ms<br/>• Scalability: Handle 1000 req/sec<br/>• Security: 100% authentication required<br/>• Availability: 99.95% uptime target]
    
    Step2 -.-> NFR2[⚡ Non-Functional Requirements<br/>• Performance: Validation time <50ms<br/>• Reliability: 99.9% accuracy rate<br/>• Scalability: 95% cache hit rate<br/>• Maintainability: Regex pattern updates]
    
    Step3 -.-> NFR3[⚡ Non-Functional Requirements<br/>• Performance: 5-second timeout limit<br/>• Reliability: 3 retry attempts with backoff<br/>• Scalability: Circuit breaker at 50% failure<br/>• Operability: Health check endpoints]
    
    Step4 -.-> NFR4[⚡ Non-Functional Requirements<br/>• Security: 100% threat screening coverage<br/>• Compliance: Log all security events<br/>• Performance: Parallel security checks<br/>• Reliability: External API fallback strategy]
    
    %% Data Flow Annotations
    Step1 -.-> Data1[💾 Data Operations<br/>• Input: URL string, user context<br/>• Validation: Schema validation, sanitization<br/>• Storage: Request metadata in Redis<br/>• Output: Validated request object]
    
    Step2 -.-> Data2[💾 Data Operations<br/>• Input: Raw URL string<br/>• Processing: Regex pattern matching<br/>• Caching: Store validation results TTL 1hr<br/>• Output: Format validation result]
    
    Step3 -.-> Data3[💾 Data Operations<br/>• Input: Validated URL<br/>• Processing: HTTP HEAD/GET request<br/>• Caching: Store accessibility results TTL 30min<br/>• Output: Accessibility status + metadata]
    
    Step4 -.-> Data4[💾 Data Operations<br/>• Input: Accessible URL<br/>• Processing: Multi-source security scanning<br/>• Storage: Threat data in PostgreSQL<br/>• Output: Security assessment report]
    
    %% Error Handling Annotations
    Step1 -.-> Error1[🚨 Error Handling<br/>• Auth Failure: Return 401 with retry guidance<br/>• Rate Limit: Return 429 with retry-after header<br/>• Input Error: Return 400 with validation details<br/>• System Error: Return 503 with fallback options]
    
    Step2 -.-> Error2[🚨 Error Handling<br/>• Format Error: Return specific format violation<br/>• Cache Error: Proceed without cache, log warning<br/>• Service Error: Return 500 with correlation ID<br/>• Timeout Error: Return 504 with retry guidance]
    
    Step3 -.-> Error3[🚨 Error Handling<br/>• Network Error: Retry with exponential backoff<br/>• DNS Error: Return specific DNS failure details<br/>• Timeout Error: Return timeout with suggestions<br/>• Circuit Open: Return 503 with estimated recovery]
    
    Step4 -.-> Error4[🚨 Error Handling<br/>• Security Threat: Return 403 with threat details<br/>• External API Error: Use fallback security rules<br/>• Database Error: Continue with cached blacklist<br/>• Scanning Error: Return 502 with partial results]
    
    %% Monitoring and Observability Annotations
    Step1 -.-> Monitor1[📊 Monitoring & Observability<br/>• Metrics: Request rate, response time, error rate<br/>• Logs: Structured JSON with correlation IDs<br/>• Tracing: Distributed tracing with OpenTelemetry<br/>• Alerts: Response time >500ms, error rate >1%]
    
    Step2 -.-> Monitor2[📊 Monitoring & Observability<br/>• Metrics: Validation rate, cache hit rate, accuracy<br/>• Logs: Validation patterns, cache performance<br/>• Tracing: Validation component performance<br/>• Alerts: Cache hit rate <90%, validation time >100ms]
    
    Step3 -.-> Monitor3[📊 Monitoring & Observability<br/>• Metrics: Success rate, timeout rate, retry count<br/>• Logs: External request attempts, circuit state<br/>• Tracing: Network call performance, DNS resolution<br/>• Alerts: Success rate <95%, circuit breaker open]
    
    Step4 -.-> Monitor4[📊 Monitoring & Observability<br/>• Metrics: Threat detection rate, scan duration<br/>• Logs: Security events, threat intelligence updates<br/>• Tracing: Multi-source scanning performance<br/>• Alerts: Threat detected, external API failures]
    
    %% Alternative Flows with Annotations
    Step2 -->|Format Invalid| FormatError[❌ Format Error Response]
    Step3 -->|Not Accessible| AccessError[❌ Accessibility Error Response]
    Step4 -->|Security Threat| SecurityError[❌ Security Threat Blocked]
    
    FormatError -.-> ErrorArch1[🔧 Error Architecture<br/>• Error Handler: Global exception handler<br/>• Error Logger: Structured error logging<br/>• Error Response: Standardized error format<br/>• Error Metrics: Error classification and counting]
    
    AccessError -.-> ErrorArch2[🔧 Error Architecture<br/>• Retry Logic: Exponential backoff strategy<br/>• Fallback Service: Alternative validation method<br/>• Error Cache: Cache known inaccessible URLs<br/>• User Notification: Clear error messaging]
    
    SecurityError -.-> ErrorArch3[🔧 Error Architecture<br/>• Security Logger: Immutable security event log<br/>• Threat Database: Store threat intelligence<br/>• Alert System: Real-time security notifications<br/>• Compliance Reporter: Automated compliance reports]
    
    %% Implementation Technology Annotations
    Success -.-> Tech[🛠️ Implementation Technologies<br/>• Backend: Node.js with Express.js framework<br/>• Database: PostgreSQL 14 with Redis 6 cache<br/>• Security: VirusTotal API + custom blacklist<br/>• Monitoring: Prometheus + Grafana + ELK stack<br/>• Deployment: Docker + Kubernetes on AWS<br/>• CI/CD: GitHub Actions with automated testing]
    
    %% Styling
 
    
    class Start,Step1,Step2,Step3,Step4,Success usecase
    class Arch1,Arch2,Arch3,Arch4,ErrorArch1,ErrorArch2,ErrorArch3 architecture
    class NFR1,NFR2,NFR3,NFR4 nfr
    class Data1,Data2,Data3,Data4 data
    class Error1,Error2,Error3,Error4,FormatError,AccessError,SecurityError error
    class Monitor1,Monitor2,Monitor3,Monitor4 monitoring
    class Tech tech